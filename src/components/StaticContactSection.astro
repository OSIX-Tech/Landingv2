---
  // StaticContactSection.astro - Sección de contacto estática
  import ISP from '../content/information-security-policy_esp.md';
  import PP from '../content/privacy-policy.md';
---

  <div id="contact-div" class="w-full max-w-7xl mx-auto px-6 md:px-12 min-h-[90vh] static-contact-container">
    <h2 class="section-title">
      Our <span class="font-bold">Contact</span>
    </h2>
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8 sm:gap-10 md:gap-12 mt-8 sm:mt-10 md:mt-12 mb-4 lg:mb-28">
      <!-- Columna izquierda: Información de contacto -->
      <div class="space-y-8 contact-info-col animate-on-scroll">
        <div class="space-y-4">
          <h3 class="text-xl sm:text-2xl font-bold">Contact Information</h3>
          <p class="font-normal">Fill out the form and our team will get back to you within 24 hours.</p>
        </div>
        
        <div class="space-y-6">
          <div class="flex items-start gap-4">
            <div class="w-10 h-10 rounded-full bg-black flex items-center justify-center flex-shrink-0">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
              </svg>
            </div>
            <div>
              <h4 class="font-semibold">Location</h4>
              <p class="font-normal">Santiago de Compostela, Spain</p>
            </div>
          </div>
          
          <div class="flex items-start gap-4">
            <div class="w-10 h-10 rounded-full bg-black flex items-center justify-center flex-shrink-0">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
              </svg>
            </div>
            <div>
              <h4 class="font-semibold">Email</h4>
              <p class="font-normal">info@osix.tech</p>
            </div>
          </div>
          
          <div class="flex items-start gap-4">
            <button
              id="privacy-policy-btn"
              type="button"
              class="w-10 h-10 rounded-full bg-black flex items-center justify-center flex-shrink-0
                     transition-transform duration-200 ease-out hover:scale-110
                    focus:outline-none active:scale-95"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 2l7 4v6c0 5-3 9-7 10-4-1-7-5-7-10V6l7-4z"/>
              </svg>
            </button>
            <div>
              <h4 class="font-semibold">Privacy Policy</h4>
              <p class="font-normal">Read our policy on data protection.</p>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Columna derecha: Formulario -->
      <div class="bg-black rounded-lg p-6 sm:p-8 contact-form-col animate-on-scroll">
        <form id="static-contact-form" class="space-y-4">
          <div>
            <label for="name" class="block text-white mb-2">Name</label>
            <input
              type="text"
              id="name"
              name="user_name"
              class="w-full px-3 sm:px-4 py-2 sm:py-3 rounded bg-white text-black focus:outline-none focus:ring-2 focus:ring-white text-sm sm:text-base"
              required
              minlength="2"
              pattern="^[A-Za-zÀ-ÖØ-öø-ÿ\s'-]+$"
              title="Please enter a valid name (letters, spaces, apostrophes or hyphens only)"
            />
          </div>
          
          <div>
            <label for="email" class="block text-white mb-2">Email</label>
            <input
              type="email"
              id="email"
              name="user_email"
              class="w-full px-3 sm:px-4 py-2 sm:py-3 rounded bg-white text-black focus:outline-none focus:ring-2 focus:ring-white text-sm sm:text-base"
              required
              pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$"
              title="Please enter a valid email address"
            />
          </div>
          
          <div>
            <label for="message" class="block text-white mb-2">Message</label>
            <textarea
              id="message"
              name="message"
              rows="4"
              class="no-resize w-full px-3 sm:px-4 py-2 sm:py-3 rounded bg-white text-black focus:outline-none focus:ring-2 focus:ring-white text-sm sm:text-base"
              required
              minlength="10"
            ></textarea>
          </div>
          
          <button
            type="submit"
            class="w-full bg-white text-black py-4 sm:py-3 px-4 sm:px-6 rounded font-medium hover:bg-gray-100 transition-colors duration-300 text-sm sm:text-base mt-4"
          >
            Send Message
          </button>
        </form>
      </div>
    </div>
  </div>

<style>
  .animate-on-scroll {
    opacity: 0;
    transform: translateY(30px);
  }

  /* Keyframes for the animation */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

</style>

<script>
  import { initEmailJS, sendEmail } from '../utils/emailjs.js';

  document.addEventListener('DOMContentLoaded', () => {
    // EmailJS Initialization
    initEmailJS();
    
    const staticContactForm = document.getElementById('static-contact-form') as HTMLFormElement | null;
    
    if (staticContactForm) {
      staticContactForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const submitButton = staticContactForm.querySelector('button[type="submit"]') as HTMLButtonElement | null;
        if (!submitButton) return;
        
        const originalButtonText = submitButton.textContent || 'Send Message';
        submitButton.textContent = 'Sending...';
        submitButton.disabled = true;
        
        const formData = new FormData(staticContactForm);
        
        const date = new Date().toLocaleString('en-US', {
          day: '2-digit',
          month: 'long',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
          hour12: false,
        });

        const templateParams = {
          user_name:  formData.get('user_name'),
          user_email: formData.get('user_email'),
          message:    formData.get('message'),
          date,              
        };
        
        sendEmail(templateParams)
          .then(function(response) {
            console.log('SUCCESS!', response.status, response.text);
            submitButton.textContent = 'Message sent!';
            staticContactForm.reset();
            setTimeout(() => {
              submitButton.textContent = originalButtonText;
              submitButton.disabled = false;
            }, 3000);
          })
          .catch(function(error) {
            console.log('FAILED...', error);
            submitButton.textContent = 'Error sending message';
            setTimeout(() => {
              submitButton.textContent = originalButtonText;
              submitButton.disabled = false;
            }, 3000);
          });
      });
    }

    // Privacy‑Policy modal logic
    const privacyPolicyBtn = document.getElementById('privacy-policy-btn') as HTMLButtonElement | null;
    const privacyPolicyModal = document.getElementById('privacy-policy-modal') as HTMLDivElement | null;
    const closePrivacyPolicyBtn = document.getElementById('close-privacy-policy') as HTMLButtonElement | null;

    function openPrivacyModal() {
      if (privacyPolicyModal) {
        privacyPolicyModal.classList.remove('hidden');
      }
    }

    function closePrivacyModal() {
      if (privacyPolicyModal) {
        privacyPolicyModal.classList.add('hidden');
      }
    }

    if (privacyPolicyBtn && privacyPolicyModal && closePrivacyPolicyBtn) {
      privacyPolicyBtn.addEventListener('click', openPrivacyModal);
      closePrivacyPolicyBtn.addEventListener('click', closePrivacyModal);

      // Close when clicking outside the dialog content
      privacyPolicyModal.addEventListener('click', (event) => {
        if (event.target === privacyPolicyModal) {
          closePrivacyModal();
        }
      });

      // Close on Escape key
      document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape' && !privacyPolicyModal.classList.contains('hidden')) {
          closePrivacyModal();
        }
      });
    }

    // Tab logic within modal
    const tabPrivacyBtn = document.getElementById('tab-privacy') as HTMLButtonElement | null;
    const tabTermsBtn   = document.getElementById('tab-terms')   as HTMLButtonElement | null;
    const privacyPanel  = document.getElementById('tab-privacy-content') as HTMLDivElement | null;
    const termsPanel    = document.getElementById('tab-terms-content')   as HTMLDivElement | null;

    function activateTab(isPrivacy: boolean) {
      if (!tabPrivacyBtn || !tabTermsBtn || !privacyPanel || !termsPanel) return;

      if (isPrivacy) {
        // Activate Privacy tab
        tabPrivacyBtn.classList.add('border-black', 'font-semibold', 'text-black');
        tabPrivacyBtn.classList.remove('border-transparent', 'text-gray-600');

        tabTermsBtn.classList.add('border-transparent', 'text-gray-600');
        tabTermsBtn.classList.remove('border-black', 'font-semibold', 'text-black');

        privacyPanel.classList.remove('hidden');
        termsPanel.classList.add('hidden');
      } else {
        // Activate Terms tab
        tabTermsBtn.classList.add('border-black', 'font-semibold', 'text-black');
        tabTermsBtn.classList.remove('border-transparent', 'text-gray-600');

        tabPrivacyBtn.classList.add('border-transparent', 'text-gray-600');
        tabPrivacyBtn.classList.remove('border-black', 'font-semibold', 'text-black');

        termsPanel.classList.remove('hidden');
        privacyPanel.classList.add('hidden');
      }
    }

    if (tabPrivacyBtn && tabTermsBtn) {
      tabPrivacyBtn.addEventListener('click', () => activateTab(true));
      tabTermsBtn.addEventListener('click', () => activateTab(false));
    }

    // Intersection Observer for animations
    const sectionContainer = document.querySelector('.static-contact-container');
    if (!sectionContainer) return;

    const animatedElements = [
      sectionContainer.querySelector('.contact-info-col'),
      sectionContainer.querySelector('.contact-form-col')
    ].filter(el => el !== null) as HTMLElement[];

    if (animatedElements.length === 0) return;

    let animationTimeoutId: number | null = null;

    // Initially hide elements that will be animated
    animatedElements.forEach(el => {
      el.style.opacity = '0';
      el.style.transform = 'translateY(30px)';
      el.style.animation = 'none'; // Ensure no CSS animation plays on load
    });

    const observer = new window.IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.target === sectionContainer) {
          if (entry.isIntersecting) {
            if (animationTimeoutId !== null) {
              clearTimeout(animationTimeoutId);
            }
            animationTimeoutId = setTimeout(() => {
              animatedElements.forEach((el, idx) => {
                el.offsetHeight; // Force reflow
                el.style.animation = `fadeInUp 1.5s cubic-bezier(0.22, 1, 0.36, 1) forwards ${idx * 0.2}s`; 
              });
            }, 300); // Current timeout value from user
          } else {
            if (animationTimeoutId !== null) {
              clearTimeout(animationTimeoutId);
              animationTimeoutId = null;
            }
            // Reset elements to their pre-animation state when out of view
            animatedElements.forEach(el => {
              el.style.animation = 'none';
              el.style.opacity = '0';
              el.style.transform = 'translateY(30px)';
            });
          }
        }
      });
    }, { threshold: 0.2 });

    observer.observe(sectionContainer);
  });
</script>

<!-- Privacy Policy Modal -->
<div
  id="privacy-policy-modal"
  class="hidden fixed inset-0 bg-black/40 backdrop-blur-sm flex  items-start justify-center p-4 md:p-8 lg:py-16 z-50"
>
  
  <div class="relative bg-white rounded-lg p-8 w-full max-w-4xl max-h-full overflow-y-auto flex flex-col">
    <!-- Tabs -->
    <div class="flex border-b mb-4">
      <button id="tab-privacy" type="button"
        class="tab-btn px-4 pb-2 font-semibold border-b-2 border-black text-black hover:text-black transition-colors"
      >
        Privacy policy
      </button>
      <button id="tab-terms" type="button"
        class="tab-btn px-4 pb-2 border-b-2 border-transparent text-gray-600 hover:text-black transition-colors"
      >
        Information Security Policy
      </button>
    </div>

    <!-- Tab panels -->
    <div id="tab-terms-content" class="markdown-body text-black hidden">
      <ISP />
    </div>
    <div id="tab-privacy-content" class="markdown-body text-black">
      <PP />
    </div>
    <!-- Close button at bottom‑right of panel -->
    <button
      id="close-privacy-policy"
      type="button"
      aria-label="Close modal"
      class="self-end mt-6 bg-black text-white px-4 py-2 rounded
             hover:bg-gray-900 transition focus:outline-none"
    >
      Close
    </button>
  </div>
</div>