---
import { Image } from 'astro:assets';
// Services.astro - Sección de servicios con iconos de animales

interface TeamMember {
  name: string;
  role: string;
  image: string;
  technologies: string[];
}

const teamMembers: TeamMember[] = [
  {
    name: "Rosana Raposeiras",
    role: "Frontend Developer",
    image: "/team/rosana.jpg",
    technologies: ["js", "angular", "html", "css", "react", "tailwind", "next", "bootstrap"]
  },
  {
    name: "Alex Torres",
    role: "Backend Architect",
    image: "/team/member2.jpg",
    technologies: ["python", "django", "postgresql", "docker", "aws", "redis", "nodejs", "graphql"]
  },
  {
    name: "María González",
    role: "UI/UX Designer",
    image: "/team/member3.jpg",
    technologies: ["figma", "sketch", "adobe-xd", "photoshop", "illustrator", "zeplin", "principle", "invision"]
  },
  {
    name: "Carlos Ruiz",
    role: "DevOps Engineer",
    image: "/team/member4.jpg",
    technologies: ["kubernetes", "docker", "aws", "jenkins", "terraform", "ansible", "prometheus", "grafana"]
  },
  {
    name: "Laura Martínez",
    role: "Mobile Developer",
    image: "/team/member5.jpg",
    technologies: ["swift", "kotlin", "flutter", "react-native", "firebase", "xcode", "android-studio", "fastlane"]
  },
  {
    name: "David Silva",
    role: "Full Stack Developer",
    image: "/team/member6.jpg",
    technologies: ["typescript", "vue", "node", "mongodb", "graphql", "sass", "webpack", "jest"]
  }
];
---

<section id="about" class="bg-black text-white h-screen min-h-screen flex items-center justify-center overflow-hidden">
  <!-- Panel negro bocadillo solo para modo miembros -->
  <div id="bocadilloPanel" class="fixed top-0 right-0 h-full w-1/2 clip-bocadillo hidden z-30"></div>
  <!-- Panel de información del miembro (blanco) -->
  <div id="memberInfo" class="fixed top-0 left-0 right-0 margin-left-auto margin-right-auto height-100vh width-100vw max-width-100vw background-white flex flex-col items-center justify-center opacity-0 pointer-events-none z-40 transition-all duration-300">
    <!-- Pico blanco grande -->
    <div class="bocadillo-pico-grande"></div>
    <div class="flex flex-col items-center w-full px-2 sm:px-6 md:px-8">
      <div class="relative w-24 h-24 sm:w-32 sm:h-32 md:w-40 md:h-40 rounded-full overflow-hidden border-4 md:border-8 border-black mb-4 md:mb-6 shadow-lg mt-4 md:mt-8 mx-auto">
        <img id="memberImage" src="" alt="" class="w-full h-full object-cover mx-auto" />
      </div>
      <h3 id="memberName" class="text-xl sm:text-2xl md:text-3xl font-bold mb-1 font-orbitron text-black text-center mx-auto"></h3>
      <p id="memberRole" class="text-base sm:text-lg md:text-xl text-gray-500 font-orbitron text-center mb-4 md:mb-8 mx-auto"></p>
    </div>
    <div id="memberTechnologies" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3 sm:gap-4 md:gap-5 w-full max-w-md mx-auto px-2 sm:px-6 md:px-8 mb-6 md:mb-8">
      <!-- Las tecnologías se insertarán dinámicamente -->
    </div>
    <div class="w-full flex justify-center">
      <button id="exitMemberInfo" class="bg-black text-white px-5 py-2 rounded-full text-sm font-medium hover:bg-gray-800 transition-colors shadow-md mb-2">
        Volver
      </button>
    </div>
  </div>
  <div class="container mx-auto px-4 relative z-10">
    <div class="grid grid-cols-1 lg:grid-cols-[2fr,1fr] gap-8 md:gap-12 items-center">
      <!-- Contenedor izquierdo con hexágono y panel de miembro -->
      <div class="relative mb-12 md:mb-0">
        <!-- Hexágono con círculos (oculto en móvil) -->
        <div class="osix-grid hidden lg:block mx-auto w-full max-w-full max-h-[80vh] px-4 aspect-square" id="iconsGrid">
          <!-- Logo central -->
          <div class="osix-logo flex items-center justify-center">
            <img src="/logo_w.png" alt="OSIX" class="w-full h-full object-contain" />
          </div>
          
          <!-- Círculos -->
          <div class="icons-container" id="iconsContainer">
            {[1,2,3,4,5,6].map((_, index) => (
              <div class={`icon-wrapper`} data-index={index}>
                <div class="w-full h-full bg-white rounded-full flex items-center justify-center transform hover:scale-110 transition-all duration-300 cursor-pointer shadow-lg hover:shadow-white/20">
                  <svg viewBox="0 0 100 100" class="w-16 h-16">
                    <!-- Los SVGs los colocarás tú -->
                  </svg>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      <!-- Panel de servicios (derecha) -->
      <div id="servicesInfo" class="relative w-full min-w-0">
        <div class="mb-16">
          <div class="flex items-center justify-end gap-6">
            <p class="text-lg md:text-xl font-medium max-w-lg">Build B2C / B2B mobile applications with great and complex functionality</p>
            <div class="bg-white rounded-full w-16 h-16 flex items-center justify-center flex-shrink-0">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="w-8 h-8">
                <path d="M17,2 L7,2 C5.9,2 5,2.9 5,4 L5,20 C5,21.1 5.9,22 7,22 L17,22 C18.1,22 19,21.1 19,20 L19,4 C19,2.9 18.1,2 17,2 Z" fill="black"/>
              </svg>
            </div>
          </div>
          <p class="text-xl font-medium mt-2 font-orbitron">mobile</p>
        </div>

        <div class="mb-16">
          <div class="flex items-center justify-end gap-6">
            <p class="text-lg md:text-xl font-medium max-w-lg">Development of web applications and portals to interact with your clients and web API for automated interactions</p>
            <div class="bg-white rounded-full w-16 h-16 flex items-center justify-center flex-shrink-0">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="w-8 h-8">
                <path d="M12,2 C6.48,2 2,6.48 2,12 C2,17.52 6.48,22 12,22 C17.52,22 22,17.52 22,12 C22,6.48 17.52,2 12,2 Z" fill="black"/>
              </svg>
            </div>
          </div>
          <p class="text-xl font-medium mt-2 font-orbitron">web</p>
        </div>

        <div>
          <div class="flex items-center justify-end gap-6">
            <p class="text-lg md:text-xl font-medium max-w-lg">Design and implementation of software / hardware infrastructure for high volume apps and big data processing</p>
            <div class="bg-white rounded-full w-16 h-16 flex items-center justify-center flex-shrink-0">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="w-8 h-8">
                <path d="M20,18 C21.1,18 22,17.1 22,16 L22,6 C22,4.9 21.1,4 20,4 L4,4 C2.9,4 2,4.9 2,6 L2,16 C2,17.1 2.9,18 4,18" fill="black"/>
              </svg>
            </div>
          </div>
          <p class="text-xl font-medium mt-2 font-orbitron">desktop</p>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .osix-grid {
    position: relative;
    width: 100%;
    aspect-ratio: 1 / 1;
    margin-left: 0;
    min-width: 200px;
    max-width: 100vw;
    box-sizing: border-box;
  }
  @media (min-width: 768px) {
    .osix-grid {
      max-width: 28rem;
    }
  }
  @media (min-width: 1024px) {
    .osix-grid {
      max-width: 48rem;
    }
  }

  .icons-container {
    position: absolute;
    width: 100%;
    height: 100%;
    transition: transform 0.8s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .icon-wrapper {
    position: absolute;
    width: 7rem;
    height: 7rem;
    transform-origin: center;
    transition: all 0.3s ease;
  }

  /* Logo central */
  .osix-logo {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 60px;
    height: 60px;
    z-index: 10;
  }
  @media (min-width: 768px) {
    .osix-logo {
      width: 90px;
      height: 90px;
    }
  }
  @media (min-width: 1024px) {
    .osix-logo {
      width: 180px;
      height: 180px;
      left: 52%;
      transform: translate(-50%, -50%);
    }
  }

  .clip-bocadillo {
    background: #000;
    clip-path: polygon(
      0 0,
      88% 0,
      95% 44%, /* inicio de la punta */
      100% 50%, /* vértice de la punta */
      95% 56%, /* fin de la punta */
      88% 100%,
      0 100%
    );
    z-index: 30;
    pointer-events: none;
  }

  .diagonal-panel {
    clip-path: none !important;
    box-shadow: -8px 0 32px 0 rgba(0,0,0,0.18);
    border-radius: 0;
  }
  #memberInfo {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    margin-left: auto;
    margin-right: auto;
    height: 100vh;
    width: 100vw;
    max-width: 100vw;
    background: #fff;
    color: #111;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    opacity: 0;
    pointer-events: none;
    z-index: 40;
    transition: all 0.3s cubic-bezier(.4,0,.2,1);
    box-shadow: -8px 0 32px 0 rgba(0,0,0,0.18);
    border-radius: 0;
    overflow-y: auto;
    padding: 1.5rem 0.5rem 1.5rem 0.5rem;
  }
  @media (min-width: 480px) {
    #memberInfo {
      max-width: 22rem;
      padding: 2rem 1rem;
    }
  }
  @media (min-width: 640px) {
    #memberInfo {
      max-width: 28rem;
      padding: 2.5rem 1.5rem;
    }
  }
  @media (min-width: 768px) {
    #memberInfo {
      max-width: 36rem;
      padding: 3rem 2rem;
    }
  }
  @media (min-width: 1024px) {
    #memberInfo {
      right: 0;
      left: auto;
      margin-left: 0;
      margin-right: 0;
      width: 50vw;
      min-width: 380px;
      max-width: 900px;
      justify-content: center;
    }
  }
  #memberInfo.visible {
    opacity: 1;
    pointer-events: auto;
  }
  #memberInfo .tech-icon {
    background: #18181b;
    border-radius: 1rem;
    box-shadow: 0 2px 8px 0 rgba(0,0,0,0.10);
    display: flex;
    align-items: center;
    justify-content: center;
    width: 48px;
    height: 48px;
    margin: 0 auto;
    transition: transform 0.2s;
    opacity: 0;
    transform: translateY(10px);
    animation: fadeInUp 0.5s ease forwards;
  }
  @media (min-width: 640px) {
    #memberInfo .tech-icon {
      width: 64px;
      height: 64px;
    }
  }
  #memberInfo .tech-icon img {
    width: 2rem;
    height: 2rem;
    object-fit: contain;
    filter: drop-shadow(0 1px 2px rgba(0,0,0,0.10));
  }
  @media (min-width: 640px) {
    #memberInfo .tech-icon img {
      width: 40px;
      height: 40px;
    }
  }
  #memberInfo .tech-icon p {
    display: none;
  }
  #exitMemberInfo {
    position: absolute;
    bottom: 2rem;
    right: 2rem;
    background: #111;
    color: #fff;
    border-radius: 9999px;
    font-size: 0.95rem;
    padding: 0.5rem 1.2rem;
    box-shadow: 0 2px 8px 0 rgba(0,0,0,0.10);
    border: none;
    outline: none;
    cursor: pointer;
    transition: background 0.2s;
  }
  #exitMemberInfo:hover {
    background: #222;
  }

  #servicesInfo {
    transition: opacity 0.3s ease;
  }

  #servicesInfo.dimmed {
    opacity: 0.3;
  }

  .tech-icon {
    opacity: 0;
    transform: translateY(10px);
    animation: fadeInUp 0.5s ease forwards;
  }

  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .bocadillo-pico-grande {
    position: absolute;
    left: -240px;
    top: 0;
    width: 240px;
    height: 117%;
    background: #fff;
    clip-path: polygon(100% 0, 0 50%, 100% 100%);
    z-index: 2;
    pointer-events: none;
  }
  .bocadillo-punta {
    position: absolute;
    left: -54px;
    top: 48%;
    width: 54px;
    height: 80px;
    background: #fff;
    clip-path: polygon(0 50%, 100% 0, 100% 100%);
    z-index: 2;
    display: block;
    pointer-events: none;
  }
  .bocadillo-punta.hidden {
    display: none;
  }

  #memberTechnologies {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    width: 100%;
    padding-left: 0.5rem;
    padding-right: 0.5rem;
    margin-bottom: 2rem;
  }
  @media (min-width: 640px) {
    #memberTechnologies {
      grid-template-columns: repeat(4, 1fr);
      gap: 1.25rem;
      padding-left: 2rem;
      padding-right: 2rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const teamMembers = [
      {
        name: "Rosana Raposeiras",
        role: "Frontend Developer",
        image: "/team/rosana.jpg",
        technologies: ["js", "angular", "html", "css", "react", "tailwind", "next", "bootstrap"]
      },
      {
        name: "Alex Torres",
        role: "Backend Architect",
        image: "/team/member2.jpg",
        technologies: ["python", "django", "postgresql", "docker", "aws", "redis", "nodejs", "graphql"]
      },
      {
        name: "María González",
        role: "UI/UX Designer",
        image: "/team/member3.jpg",
        technologies: ["figma", "sketch", "adobe-xd", "photoshop", "illustrator", "zeplin", "principle", "invision"]
      },
      {
        name: "Carlos Ruiz",
        role: "DevOps Engineer",
        image: "/team/member4.jpg",
        technologies: ["kubernetes", "docker", "aws", "jenkins", "terraform", "ansible", "prometheus", "grafana"]
      },
      {
        name: "Laura Martínez",
        role: "Mobile Developer",
        image: "/team/member5.jpg",
        technologies: ["swift", "kotlin", "flutter", "react-native", "firebase", "xcode", "android-studio", "fastlane"]
      },
      {
        name: "David Silva",
        role: "Full Stack Developer",
        image: "/team/member6.jpg",
        technologies: ["typescript", "vue", "node", "mongodb", "graphql", "sass", "webpack", "jest"]
      }
    ];

    const iconsContainer = document.getElementById('iconsContainer');
    const iconWrappers = document.querySelectorAll('.icon-wrapper');

    // Calcular el tamaño real del grid para posicionar los iconos de forma responsiva
    function positionHexIcons() {
      const grid = document.getElementById('iconsGrid');
      if (!grid) return;
      const rect = grid.getBoundingClientRect();
      const size = Math.min(rect.width, rect.height);
      const radius = size / 2.5;
      const centerX = rect.width / 2;
      const centerY = rect.height / 2;
      iconWrappers.forEach((el, i) => {
        const angle = (i * 60) * Math.PI / 180;
        const x = centerX + radius * Math.cos(angle);
        const y = centerY + radius * Math.sin(angle);
        (el as HTMLElement).style.cssText = `
          position: absolute;
          left: ${x - 56}px;
          top: ${y - 56}px;
        `;
      });
    }
    // Llama a la función al cargar y al redimensionar
    positionHexIcons();
    window.addEventListener('resize', positionHexIcons);

    let currentRotation = 0;
    let isAnimating = false;
    let currentIndex = 0;
    let isShowingMember = false;
    const ROTATION_STEP = 60; // Grados de rotación por paso

    // Elementos del DOM
    const memberInfo = document.getElementById('memberInfo');
    const servicesInfo = document.getElementById('servicesInfo');
    const memberImage = document.getElementById('memberImage') as HTMLImageElement;
    const memberName = document.getElementById('memberName');
    const memberRole = document.getElementById('memberRole');
    const memberTechnologies = document.getElementById('memberTechnologies');
    const exitButton = document.getElementById('exitMemberInfo');
    const aboutSection = document.getElementById('about');

    function calculateShortestRotation(targetIndex: number) {
      const currentAngle = currentRotation % 360;
      const targetAngle = -targetIndex * ROTATION_STEP;
      let deltaAngle = targetAngle - currentAngle;

      // Ajustar para tomar el camino más corto
      if (Math.abs(deltaAngle) > 180) {
        deltaAngle = deltaAngle > 0 ? deltaAngle - 360 : deltaAngle + 360;
      }

      return currentRotation + deltaAngle;
    }

    function rotateWheel(direction: 'up' | 'down') {
      if (isAnimating || !isShowingMember) return;
      isAnimating = true;

      // Actualizar el índice actual
      if (direction === 'up') {
        currentIndex = (currentIndex - 1 + 6) % 6;
      } else {
        currentIndex = (currentIndex + 1) % 6;
      }

      // Calcular la nueva rotación usando el camino más corto
      currentRotation = calculateShortestRotation(currentIndex);

      // Aplicar la rotación
      if (iconsContainer) {
        iconsContainer.style.transform = `rotate(${currentRotation}deg)`;
      }

      // Mostrar información después de la rotación
      setTimeout(() => {
        showMemberInfo(currentIndex);
        isAnimating = false;
      }, 800);
    }

    function showMemberInfo(index: number) {
      const member = teamMembers[index];
      if (!member || !memberInfo || !servicesInfo) return;

      // Actualizar contenido
      if (memberImage) memberImage.src = member.image;
      if (memberName) memberName.textContent = member.name;
      if (memberRole) memberRole.textContent = member.role;
      
      if (memberTechnologies) {
        memberTechnologies.innerHTML = member.technologies
          .map((tech, i) => `
            <div class="tech-icon" style="animation-delay: ${i * 0.1}s">
              <img src="https://skillicons.dev/icons?i=${tech}&theme=light" alt="${tech}" class="w-8 h-8" />
            </div>
          `).join('');
      }

      // Mostrar panel
      memberInfo.classList.add('visible');
      servicesInfo.classList.add('dimmed');
      isShowingMember = true;
      // Mostrar la punta
      const bocadilloPunta = document.getElementById('bocadilloPunta');
      if (bocadilloPunta) bocadilloPunta.classList.remove('hidden');
    }

    function hideMemberInfo() {
      if (!memberInfo || !servicesInfo) return;
      memberInfo.classList.remove('visible');
      servicesInfo.classList.remove('dimmed');
      isShowingMember = false;
      // Ocultar la punta
      const bocadilloPunta = document.getElementById('bocadilloPunta');
      if (bocadilloPunta) bocadilloPunta.classList.add('hidden');
    }

    // Event listeners
    iconWrappers.forEach((icon, index) => {
      icon.addEventListener('click', () => {
        if (isAnimating) return;
        currentIndex = index;
        currentRotation = calculateShortestRotation(index);
        
        if (iconsContainer) {
          iconsContainer.style.transform = `rotate(${currentRotation}deg)`;
        }

        setTimeout(() => {
          showMemberInfo(index);
          isAnimating = false;
        }, 800);
      });
    });

    // Manejar el scroll del ratón
    if (aboutSection) {
      aboutSection.addEventListener('wheel', (e) => {
        if (!isShowingMember) return; // Solo permitir scroll cuando se muestra información
        e.preventDefault(); // Prevenir el scroll de la página
        if (e.deltaY < 0) {
          rotateWheel('up');
        } else {
          rotateWheel('down');
        }
      }, { passive: false });
    }

    if (exitButton) {
      exitButton.addEventListener('click', hideMemberInfo);
    }

    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        hideMemberInfo();
      }
    });
  });
</script>