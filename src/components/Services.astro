---
// Services.astro - Secci√≥n de servicios tipo mockup
---

 <div class="w-full max-w-7xl mx-auto px-6 md:px-12 services-section-container">
    <h2 class="section-title">
      Our <span class="font-bold">Services</span>
    </h2>
    
    <div class="flex flex-col lg:flex-row items-center justify-between gap-8 md:gap-12 lg:gap-16 mt-8">
      <!-- Columna izquierda: Imagen -->
      <div class="w-full lg:w-[55%] xl:w-[60%] services-image-container">
        <div class="w-full aspect-[4/3] md:aspect-[16/9] relative overflow-hidden transform transition-all duration-700 hover:shadow-xl rounded-md">
          <img
            src="/services.png"
            alt="Services"
            class="w-full h-full object-cover shadow-lg transition-transform duration-700 hover:scale-105"
          />
        </div>
      </div>
      
      <!-- Columna derecha: Texto -->
      <div class="w-full lg:w-[45%] xl:w-[40%] flex flex-col justify-center services-text-container">
        <p class="text-xl sm:text-2xl md:text-3xl font-light text-black mb-6 md:mb-8 text-left services-text-1">
          Bring your vision to life through <span class="font-bold">web, mobile, and desktop solutions</span>
        </p>
        <p class="text-xl sm:text-2xl md:text-3xl font-light text-black text-left services-text-2">
          Crafted <span class="font-bold">fast</span> and <span class="font-bold">reliably</span>, by a <span class="font-bold">new generation of developers</span>.
        </p>
      </div>
    </div>
  </div>

<style>
  /* Initial hidden states for animations */
  .services-image-container,
  .services-text-container,
  .services-text-1,
  .services-text-2 {
    opacity: 0;
  }

  .services-image-container { transform: translateY(30px); }
  .services-text-container { transform: translateX(30px); }
  .services-text-1 { transform: translateY(20px); }
  .services-text-2 { transform: translateY(20px); }

  @keyframes fadeInUp {
    from { opacity: 0; transform: translateY(30px); }
    to { opacity: 1; transform: translateY(0); }
  }

  @keyframes fadeInRight {
    from { opacity: 0; transform: translateX(30px); }
    to { opacity: 1; transform: translateX(0); }
  }

  /* Interactive hover effects (unchanged) */
  .services-text-1:hover,
  .services-text-2:hover {
    transform: translateY(-5px);
    transition: transform 0.3s ease;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const sectionContainer = document.querySelector('.services-section-container');
    if (!sectionContainer) return;

    const imageContainer = sectionContainer.querySelector('.services-image-container') as HTMLElement;
    const textContainer = sectionContainer.querySelector('.services-text-container') as HTMLElement;
    const text1 = sectionContainer.querySelector('.services-text-1') as HTMLElement;
    const text2 = sectionContainer.querySelector('.services-text-2') as HTMLElement;

    if (!imageContainer || !textContainer || !text1 || !text2) return;

    let animationTimeoutId: number | null = null;

    const elementsToAnimate = [
      { el: imageContainer, animName: 'fadeInUp', duration: '0.6s', delay: '0s', initialTransform: 'translateY(30px)' },
      { el: textContainer, animName: 'fadeInRight', duration: '0.8s', delay: '0.2s', initialTransform: 'translateX(30px)' },
      { el: text1, animName: 'fadeInUp', duration: '0.6s', delay: '0.4s', initialTransform: 'translateY(20px)' },
      { el: text2, animName: 'fadeInUp', duration: '0.6s', delay: '0.6s', initialTransform: 'translateY(20px)' }
    ];

    // Function to set elements to their pre-animation (hidden) state
    const resetElements = () => {
      elementsToAnimate.forEach(item => {
        item.el.style.animation = 'none';
        item.el.style.opacity = '0';
        item.el.style.transform = item.initialTransform;
      });
    };

    // Initially hide elements
    resetElements();

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.target === sectionContainer) {
          if (entry.isIntersecting) {
            if (animationTimeoutId !== null) {
              clearTimeout(animationTimeoutId);
            }
            // Ensure elements are in their reset state before timeout starts
            resetElements();

            animationTimeoutId = setTimeout(() => {
              elementsToAnimate.forEach(item => {
                item.el.offsetHeight; // Force reflow
                item.el.style.animation = `${item.animName} ${item.duration} ease forwards ${item.delay}`;
                // Opacity will be handled by the 'forwards' fill mode of the animation
              });
            }, 100); // 500ms delay
          } else {
            if (animationTimeoutId !== null) {
              clearTimeout(animationTimeoutId);
              animationTimeoutId = null;
            }
            resetElements(); // Reset when out of view
          }
        }
      });
    }, { threshold: 0.2 });

    observer.observe(sectionContainer);
  });
</script>