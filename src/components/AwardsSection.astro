---
const { lang } = Astro.params;
const translations = await import(`../../public/locales/${lang}.json`);
const t = (k: string) => translations.default[k] || k;

const awards = [
  {
    date:  t('awards.0.date'),
    title: t('awards.0.title'),
    description: t('awards.0.description')
  },
  {
    date:  t('awards.1.date'),
    title: t('awards.1.title'),
    description: t('awards.1.description')
  },
  {
    date:  t('awards.2.date'),
    title: t('awards.2.title'),
    description: t('awards.2.description')
  },
  {
    date:  t('awards.3.date'),
    title: t('awards.3.title'),
    description: t('awards.3.description')
  }
];
---
<div class="w-full max-w-7xl mx-auto px-4 sm:px-6 md:px-12 awards-section-container">
  <h2 class="section-title" set:html={t('awards.title')}></h2>
    <!-- Versión para escritorio - Timeline horizontal con hexágonos -->  
    <div class="desktop-awards hidden md:block space-y-0 relative mt-8">
      <!-- Línea vertical central (desktop) -->
      <div class="absolute left-1/2 top-0 bottom-0 w-1 bg-black transform -translate-x-1/2 z-0"></div>
      
      {awards.map((award, idx) => (
        <div class="desktop-award-entry grid grid-cols-[1fr_auto_1fr] items-center relative gap-x-8" data-side={idx % 2 === 0 ? 'left' : 'right'}>
          <!-- Columna izquierda -->
          <div class={`${idx % 2 === 0 ? 'text-right' : ''}`.trim()}>
            {idx % 2 === 0 && (
              <div class="w-full max-w-xs ml-auto">
                <div class="text-sm text-gray-700 mb-1">{award.date}</div>
                <h3 class="text-xl sm:text-2xl font-bold mb-1">{award.title}</h3>
                <p class="text-sm sm:text-base mb-1">{award.description}</p>
              </div>
            )}
          </div>
          <!-- Columna central: hexágono -->
          <div class="flex flex-col items-center">
            <div class="bg-white p-1 rounded-full">
              <img src="/logo_pre.svg" alt="Logo" class="w-8 h-8 z-10" />
            </div>
          </div>
          <!-- Columna derecha -->
          <div class={`${idx % 2 === 1 ? 'text-left' : ''}`.trim()}>
            {idx % 2 === 1 && (
              <div class="w-full max-w-xs mr-auto">
                <div class="text-sm text-gray-700 mb-1">{award.date}</div>
                <h3 class="text-xl sm:text-2xl font-bold mb-1">{award.title}</h3>
                <p class="text-sm sm:text-base max-w-lg">{award.description}</p>
              </div>
            )}
          </div>
        </div>
      ))}
    </div>
    
    <!-- Versión para móviles - Tarjetas apiladas -->
    <div class="mobile-awards md:hidden mt-8">
      <div class="flex flex-col space-y-8">
        {awards.map((award, index) => (
          <div class="mobile-award-card bg-white rounded-lg shadow-md overflow-hidden border border-gray-100" style={`--index: ${index}`}>
            <div class="bg-black p-3 flex items-center">
              <div class="bg-white p-1 rounded-full mr-3">
                <img src="/logo_pre.svg" alt="Logo" class="w-6 h-6" />
              </div>
              <h3 class="text-white text-lg font-bold">{award.title}</h3>
            </div>
            <div class="p-4">
              <div class="text-xs text-gray-500 mb-2">{award.date}</div>
              <p class="text-sm">{award.description}</p>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>

<style is:global>
  .desktop-award-entry, .mobile-award-card {
    opacity: 0;
  }
  .desktop-award-entry.animate-from-left { transform: translateX(-50px); }
  .desktop-award-entry.animate-from-right { transform: translateX(50px); }
  .mobile-award-card.animate-up { transform: translateY(30px); }

  @keyframes slideInFromLeft {
    to { opacity: 1; transform: translateX(0); }
  }
  @keyframes slideInFromRight {
    to { opacity: 1; transform: translateX(0); }
  }
  @keyframes fadeInUp {
    to { opacity: 1; transform: translateY(0); }
  }

  /* Estilos para la versión de escritorio */
  #awards .grid {
    margin-bottom: 2rem;
  }
  
  /* Efectos para las tarjetas en móvil */
  @media (max-width: 767px) {
    #awards .rounded-lg {
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    #awards .rounded-lg:active {
      transform: translateY(-2px);
      box-shadow: 0 10px 20px rgba(0,0,0,0.1);
    }
  }
  
  /* Efecto hover en los logos */
  #awards img {
    transition: transform 0.2s ease;
    position: relative;
    z-index: 10;
  }
  
  #awards img:hover {
    transform: scale(1.1);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const sectionContainer = document.querySelector('.awards-section-container');
    if (!sectionContainer) return;

    const desktopAwardsContainer = sectionContainer.querySelector('.desktop-awards') as HTMLElement | null;
    const mobileAwardsContainer = sectionContainer.querySelector('.mobile-awards') as HTMLElement | null;

    let animationTimeoutId: number | null = null;

    const resetElements = (elements: HTMLElement[], initialClass?: string) => {
      elements.forEach(el => {
        el.style.animation = 'none';
        el.style.opacity = '0';
        el.classList.remove('animate-from-left', 'animate-from-right', 'animate-up');
        if(initialClass) el.classList.add(initialClass);
        if (el.dataset.side === 'left') el.style.transform = 'translateX(-50px)';
        else if (el.dataset.side === 'right') el.style.transform = 'translateX(50px)';
        else el.style.transform = 'translateY(30px)';
      });
    };

    const animateElements = (elements: HTMLElement[], isDesktop: boolean) => {
      elements.forEach((el, idx) => {
        el.offsetHeight; // Reflow
        let animName = 'fadeInUp';
        if (isDesktop) {
          animName = el.dataset.side === 'left' ? 'slideInFromLeft' : 'slideInFromRight';
        }
        el.style.animation = `${animName} 0.8s cubic-bezier(0.22, 1, 0.36, 1) forwards ${idx * 0.15}s`;
      });
    };
    
    const allDesktopEntries = Array.from(desktopAwardsContainer?.querySelectorAll('.desktop-award-entry') || []) as HTMLElement[];
    const allMobileCards = Array.from(mobileAwardsContainer?.querySelectorAll('.mobile-award-card') || []) as HTMLElement[];
    resetElements(allDesktopEntries); // Call with one arg, initialClass will be undefined
    resetElements(allMobileCards);   // Call with one arg, initialClass will be undefined

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.target === sectionContainer) {
          if (entry.isIntersecting) {
            if (animationTimeoutId !== null) clearTimeout(animationTimeoutId);
            
            const currentDesktopEntries = Array.from(desktopAwardsContainer?.querySelectorAll('.desktop-award-entry') || []) as HTMLElement[];
            const currentMobileCards = Array.from(mobileAwardsContainer?.querySelectorAll('.mobile-award-card') || []) as HTMLElement[];
            resetElements(currentDesktopEntries);
            resetElements(currentMobileCards);

            animationTimeoutId = setTimeout(() => {
              if (desktopAwardsContainer && mobileAwardsContainer) { // Ensure containers exist
                const isDesktopView = window.getComputedStyle(desktopAwardsContainer).display !== 'none';
                if (isDesktopView) {
                  animateElements(currentDesktopEntries, true);
                } else {
                  animateElements(currentMobileCards, false);
                }
              }
            }, 200);
          } else {
            if (animationTimeoutId !== null) clearTimeout(animationTimeoutId);
            const currentDesktopEntries = Array.from(desktopAwardsContainer?.querySelectorAll('.desktop-award-entry') || []) as HTMLElement[];
            const currentMobileCards = Array.from(mobileAwardsContainer?.querySelectorAll('.mobile-award-card') || []) as HTMLElement[];
            resetElements(currentDesktopEntries);
            resetElements(currentMobileCards);
          }
        }
      });
    }, { threshold: 0.1 });

    observer.observe(sectionContainer);
  });
</script>