---
const navItems = [
  { label: 'Inicio', href: '/' },
  { label: 'Sobre Nosotros', href: '/about' },
  { label: 'Servicios', href: '/services' },
  { label: 'Proyectos', href: '/projects' },
];

// Añadir clase activa para la página actual
const currentPath = Astro.url.pathname;
---

<header class="bg-white shadow-md sticky top-0 z-50">
  <div class="container mx-auto px-4 sm:px-6 py-4 md:py-5 flex justify-between items-center">
    <a href="/" class="group flex items-center">
      <span class="text-2xl md:text-3xl font-bold relative">
        <span class="text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-blue-800">OS</span><span class="text-blue-600 relative">IX</span>
        <span class="absolute -bottom-1 left-0 w-full h-0.5 bg-blue-600 transform origin-left transition-all duration-300 scale-x-0 group-hover:scale-x-100"></span>
      </span>
    </a>
    
    <!-- Menú para móvil -->
    <div class="md:hidden">
      <button id="menu-toggle" class="text-gray-600 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 p-2.5 rounded-md" aria-label="Abrir menú">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
    </div>
    
    <!-- Menú para pantallas medianas y grandes -->
    <nav class="hidden md:flex items-center space-x-1 lg:space-x-8">
      {navItems.map(item => {
        const isActive = currentPath === item.href || 
                         (item.href !== '/' && currentPath.startsWith(item.href));
        return (
          <a
            href={item.href}
            class={`font-medium px-3 py-2 rounded-md transition-colors ${
              isActive 
                ? 'text-blue-600 bg-blue-50' 
                : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'
            }`}
          >
            {item.label}
          </a>
        );
      })}
      <a
        href="/contact"
        class={`ml-2 bg-blue-600 text-white px-5 py-2.5 rounded-md hover:bg-blue-700 transition-colors font-medium shadow-sm ${
          currentPath === '/contact' ? 'ring-4 ring-blue-100' : ''
        }`}
      >
        Contáctanos
      </a>
    </nav>
  </div>
  
  <!-- Menú móvil desplegable -->
  <div id="mobile-menu" class="hidden md:hidden bg-white border-t border-gray-100 shadow-lg fixed left-0 right-0 z-40 transition-all duration-300 ease-in-out">
    <div class="px-4 py-3">
      <nav class="flex flex-col space-y-2">
        {navItems.map(item => {
          const isActive = currentPath === item.href || 
                          (item.href !== '/' && currentPath.startsWith(item.href));
          return (
            <a
              href={item.href}
              class={`py-3 px-4 rounded-md transition-colors text-lg ${
                isActive 
                  ? 'text-blue-600 bg-blue-50 font-medium' 
                  : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'
              }`}
            >
              {item.label}
            </a>
          );
        })}
        <a
          href="/contact"
          class="mt-2 bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 transition-colors text-center font-medium text-lg"
        >
          Contáctanos
        </a>
      </nav>
    </div>
  </div>
</header>

<script>
  // Script mejorado para el menú móvil
  document.addEventListener('DOMContentLoaded', () => {
    const menuToggle = document.getElementById('menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    const body = document.body;
    let isMenuOpen = false;
    
    if (menuToggle && mobileMenu) {
      // Función para abrir el menú
      const openMenu = () => {
        mobileMenu.classList.remove('hidden');
        body.classList.add('overflow-hidden'); // Previene scroll
        isMenuOpen = true;
        
        // Dar tiempo para que se aplique la transición
        setTimeout(() => {
          mobileMenu.classList.add('opacity-100');
          mobileMenu.classList.add('max-h-screen');
          
          // Cambia el ícono del botón a X
          const menuIcon = menuToggle.querySelector('svg');
          if (menuIcon) {
            menuIcon.innerHTML = `
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            `;
          }
        }, 10);
      };
      
      // Función para cerrar el menú
      const closeMenu = () => {
        mobileMenu.classList.remove('opacity-100');
        mobileMenu.classList.remove('max-h-screen');
        isMenuOpen = false;
        
        // Cambia el ícono de vuelta a hamburguesa
        const menuIcon = menuToggle.querySelector('svg');
        if (menuIcon) {
          menuIcon.innerHTML = `
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          `;
        }
        
        // Esperar a que termine la transición antes de ocultar
        setTimeout(() => {
          mobileMenu.classList.add('hidden');
          body.classList.remove('overflow-hidden');
        }, 300);
      };
      
      // Toggle del menú
      menuToggle.addEventListener('click', (e) => {
        e.stopPropagation();
        if (isMenuOpen) {
          closeMenu();
        } else {
          openMenu();
        }
      });
      
      // Cerrar el menú al hacer clic en cualquier enlace
      mobileMenu.querySelectorAll('a').forEach(link => {
        link.addEventListener('click', () => {
          closeMenu();
        });
      });
      
      // Cerrar el menú cuando se hace clic fuera de él
      document.addEventListener('click', (event) => {
        if (isMenuOpen && !menuToggle.contains(event.target) && !mobileMenu.contains(event.target)) {
          closeMenu();
        }
      });
      
      // Cerrar el menú cuando se presiona ESC
      document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape' && isMenuOpen) {
          closeMenu();
        }
      });
    }
  });
</script>

<style>
  /* Estilos para animar el menú móvil */
  #mobile-menu {
    max-height: 0;
    opacity: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-out, opacity 0.2s ease-out;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }
  
  #mobile-menu.max-h-screen {
    max-height: 100vh;
    opacity: 1;
  }
  
  /* Mejoras para dispositivos táctiles */
  @media (hover: none) {
    #mobile-menu a {
      padding-top: 0.875rem;
      padding-bottom: 0.875rem;
    }
  }

  /* Estilos adicionales para el título */
  @keyframes subtle-fade {
    0% { opacity: 0.8; }
    50% { opacity: 1; }
    100% { opacity: 0.8; }
  }
</style>